#!/usr/bin/python

import os, sys, requests, json, logging
import database.database as db

#################################### Sonata SP information #####################################
#TODO: scale these three parameters outside to connect with any user and to any IP
ip_address = '10.1.7.21'    #localhost???
sonata_user = 'sonata'
sonata_pwd = '1234'
base_url = 'http://'+ip_address+':32001/api/v2'


########################################## /sessions ##########################################
#POST /sessions to create a session and get the token
def create_sonata_session():
    # prepares the parameters for the POST request
    url = base_url + '/sessions'
    data = '{"username":"' + sonata_user + '","password":"' + sonata_pwd + '"}'
    
    #SONATA CONNECTION: sends the request to the Sonata Gatekeeper API
    response = requests.post(url, data).json()

    # looks for the token value generated by Sonata for the session
    token_array = response['token']
    for item_token in token_array:
        token = token_array['access_token']

    return token

#DELETE /sessions to delete a session and get the token
def delete_sonata_session(token):
    # prepares the parameters for the POST request
    url = base_url + '/sessions'
    headers_instantiation = {"authorization":"bearer " + str(token)}

    #SONATA CONNECTION: sends the request to the Sonata Gatekeeper API
    response = requests.delete(url, headers_instantiation)
    jsonresponse = json.dumps(response, indent=4, sort_keys=True)

    return jsonresponse


########################################## /requests ##########################################
#POST /requests to INSTANTIATE Network Service
def net_serv_instantiate(token, service_uuid):
    # prepares the parameters for the POST request
    url = base_url + '/requests'
    headers_instantiation = {"authorization":"bearer " + str(token)}
    data_instantiation = '{"service_uuid":"'+ service_uuid + '", "ingresses":[], "egresses":[]}'

    #sends the request to the Sonata Gatekeeper API
    response = requests.post(url, headers=headers_instantiation, data=data_instantiation)
    jsonresponse = json.loads(response.text)

    return jsonresponse

#POST /requests to TERMINATE Network Service
def net_serv_terminate(token, servInstance_uuid):
    # prepares the parameters for the POST request
    url = base_url + "/requests"
    headers_instantiation = {"authorization":"bearer " + str(token)}
    data_instantiation = '{"service_instance_uuid":"'+ servInstance_uuid + '", "request_type":"TERMINATE"}'

    # sends the request to the Sonata Gatekeeper API
    response = requests.post(url, headers=headers_instantiation, data=data_instantiation)
    jsonresponse = json.loads(response.text)

    return jsonresponse

#GET /requests to pull the information of all Network Services INSTANCES
def getNetServInstance(token):
    # prepares the parameters for the POST request
    url = base_url + "/requests"
    headers_instantiation = {"authorization":"bearer " + str(token)}

    # sends the request to the Sonata Gatekeeper API
    response = requests.get(url, headers=headers_instantiation)
    jsonresponse = json.dumps(response, indent=4, sort_keys=True)

    return jsonresponse

#GET /requests/<service_uuid> to pull the information of a single Network Service INSTANCES
def getNetServInstances(service_uuid, token):
    # prepares the parameters for the POST request
    url = base_url + "/requests/" + str(service_uuid)
    headers_instantiation = {"authorization":"bearer " + str(token)}

    # sends the request to the Sonata Gatekeeper API
    response = requests.get(url, headers=headers_instantiation)
    jsonresponse = json.dumps(response, indent=4, sort_keys=True)

    return jsonresponse.text

   
########################################## /services ##########################################
#GET /services to pull all Network Services information
def getListNetServices(token):
    #cleans the current nsInfo_list to have the information updated
    del db.nsInfo_list[:]
    
    # prepares the parameters for the POST request
    url = base_url + "/services"
    headers_instantiation = {"authorization": "bearer " + str(token)}

    # sends the request to the Sonata Gatekeeper API
    response = requests.get(url, headers=headers_instantiation)
    services_array = json.loads(response.text)
    

    for service_item in services_array:
      #Each element of the list is a dictionary   
      dict_ns = {}
      dict_ns["name"] = service_item['nsd']['name']
      dict_ns["uuid"] = service_item['uuid']
      dict_ns["decription"] = service_item['nsd']['description']
      dict_ns["version"] = service_item['nsd']['version']
      dict_ns["vendor"] = service_item['nsd']['vendor']
      dict_ns["md5"] = service_item['md5']
      dict_ns["author"] = service_item['nsd']['author']
      dict_ns["created"] = service_item['created_at']
      dict_ns["status"] = service_item['status']
      dict_ns["updated"] = service_item['updated_at']

      #adds the dictionary element into the list
      db.nsInfo_list.append(dict_ns)
            
    return db.nsInfo_list
    